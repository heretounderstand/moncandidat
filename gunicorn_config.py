# Configuration Gunicorn pour la production
import os

# Serveur
bind = f"0.0.0.0:{os.environ.get('PORT', 5000)}"
workers = 1  # Important : 1 seul worker pour Ã©viter les conflits avec le bot Telegram
threads = 2  # Plusieurs threads par worker pour gÃ©rer les requÃªtes concurrentes

# Timeouts
timeout = 60  # Timeout pour les requÃªtes
keepalive = 2

# Logging
loglevel = "info"
accesslog = "-"  # Logs d'accÃ¨s sur stdout
errorlog = "-"   # Logs d'erreur sur stderr
capture_output = True

# Performance
preload_app = True  # Charger l'app avant de forker les workers
max_requests = 1000  # RedÃ©marrer le worker aprÃ¨s N requÃªtes
max_requests_jitter = 100

# Process naming
proc_name = "election-bot"

# Worker class
worker_class = "sync"  # Utiliser les workers synchrones avec threading

# Hooks
def on_starting(server):
    """AppelÃ© au dÃ©marrage du serveur"""
    server.log.info("ğŸ¤– DÃ©marrage du serveur Election Bot...")

def on_reload(server):
    """AppelÃ© lors du rechargement"""
    server.log.info("ğŸ”„ Rechargement du serveur...")

def worker_int(worker):
    """AppelÃ© quand un worker reÃ§oit SIGINT"""
    worker.log.info("ğŸ›‘ ArrÃªt du worker demandÃ©...")

def on_exit(server):
    """AppelÃ© Ã  l'arrÃªt du serveur"""
    server.log.info("ğŸ‘‹ ArrÃªt du serveur Election Bot")