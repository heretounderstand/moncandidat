import google.generativeai as genai
from typing import List, Dict
from config import GEMINI_API_KEY

class GeminiClient:
    def __init__(self):
        genai.configure(api_key=GEMINI_API_KEY)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
    def generate_response(self, user_question: str, context: str = "", 
                         conversation_history: List[Dict] = None) -> str:
        """
        G√©n√®re une r√©ponse en utilisant Gemini 1.5 Flash
        """
        try:
            # Construire le prompt syst√®me
            system_prompt = self._build_system_prompt()
            
            # Construire le contexte de conversation
            conversation_context = self._build_conversation_context(conversation_history)
            
            # Construire le prompt complet
            full_prompt = f"""
{system_prompt}

{conversation_context}

CONTEXTE DOCUMENTAIRE:
{context if context else "Aucun document sp√©cifique trouv√© dans la base de connaissances."}

QUESTION DE L'UTILISATEUR: {user_question}

R√âPONSE:"""
            
            # G√©n√©rer la r√©ponse
            response = self.model.generate_content(
                full_prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.3,  # R√©ponses plus factuelles
                    max_output_tokens=1000,
                    top_p=0.9,
                )
            )
            
            return response.text.strip()
            
        except Exception as e:
            print(f"Erreur Gemini: {e}")
            return "D√©sol√©, je n'ai pas pu traiter ta demande. Peux-tu reformuler ta question ?"
    
    def _build_system_prompt(self) -> str:
        """Construit le prompt syst√®me pour Gemini"""
        return """Tu es un assistant sp√©cialis√© dans les √©lections pr√©sidentielles fran√ßaises. 

R√îLE:
- Tu fournis des informations factuelles et objectives sur les √©lections
- Tu pr√©sentes les positions des candidats de mani√®re neutre
- Tu peux comparer les programmes sans prendre parti
- Tu expliques les proc√©dures √©lectorales

INSTRUCTIONS:
- Base-toi PRIORITAIREMENT sur le contexte documentaire fourni
- Si l'information n'est pas dans le contexte, dis-le clairement
- Reste neutre et objectif, ne prends pas position
- Cite les sources quand possible
- R√©ponse en fran√ßais, style conversationnel mais informatif
- √âvite les r√©ponses trop longues (max 800 mots)

INTERDICTIONS:
- Ne pas inventer d'informations
- Ne pas donner de conseils de vote
- Ne pas exprimer d'opinions politiques personnelles
- Ne pas faire de propaganda pour un candidat"""
    
    def _build_conversation_context(self, history: List[Dict]) -> str:
        """Construit le contexte de conversation"""
        if not history:
            return ""
        
        context_parts = ["HISTORIQUE DE LA CONVERSATION:"]
        
        # Prendre les 3 derniers √©changes pour garder le contexte r√©cent
        for exchange in history[-3:]:
            context_parts.append(f"User: {exchange['user_message']}")
            context_parts.append(f"Assistant: {exchange['bot_response']}")
        
        context_parts.append("")  # Ligne vide
        return '\n'.join(context_parts)
    
    def generate_no_context_response(self, user_question: str) -> str:
        """
        G√©n√®re une r√©ponse quand aucun contexte n'est trouv√©
        """
        prompt = f"""
Tu es un assistant pour les √©lections pr√©sidentielles. L'utilisateur te pose cette question:

"{user_question}"

Malheureusement, tu n'as trouv√© aucune information sp√©cifique dans ta base de connaissances pour r√©pondre √† cette question.

R√©ponds poliment en:
1. Reconnaissant que tu n'as pas l'information sp√©cifique
2. Sugg√©rant de reformuler la question ou d'√™tre plus sp√©cifique
3. Proposant des sujets connexes que tu pourrais couvrir
4. Restant encourageant et utile

Garde un ton amical et professionnel.
"""
        
        try:
            response = self.model.generate_content(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.5,
                    max_output_tokens=300,
                )
            )
            return response.text.strip()
        except Exception as e:
            print(f"Erreur Gemini (no context): {e}")
            return """Je n'ai pas trouv√© d'information sp√©cifique sur ta question dans ma base de connaissances.

Peux-tu essayer de:
‚Ä¢ Reformuler ta question
‚Ä¢ √ätre plus sp√©cifique (mentionner un candidat ou un sujet pr√©cis)
‚Ä¢ Poser une question sur les programmes, positions, ou proc√©dures √©lectorales

Je suis l√† pour t'aider ! üó≥Ô∏è"""